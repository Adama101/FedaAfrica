import 'package:flutter/material.dart';
import 'package:fedaafrica/core/utils/size_utils.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onErrorContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          shadowColor: colorScheme.primary,
          elevation: 4,
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray100,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black900,
          fontSize: 16.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.gray90001,
          fontSize: 14.fSize,
          fontFamily: 'Lato',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.blueGray700,
          fontSize: 12.fSize,
          fontFamily: 'Lato',
          fontWeight: FontWeight.w400,
        ),
        displaySmall: TextStyle(
          color: appTheme.gray90002,
          fontSize: 35.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w800,
        ),
        headlineLarge: TextStyle(
          color: appTheme.amber500,
          fontSize: 32.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w800,
        ),
        headlineMedium: TextStyle(
          color: appTheme.black900,
          fontSize: 26.fSize,
          fontFamily: 'Lato',
          fontWeight: FontWeight.w600,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 24.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w700,
        ),
        labelLarge: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 12.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w600,
        ),
        labelMedium: TextStyle(
          color: appTheme.blueGray400,
          fontSize: 10.fSize,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 20.fSize,
          fontFamily: 'Lato',
          fontWeight: FontWeight.w700,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 16.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w800,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 15.fSize,
          fontFamily: 'Nunito',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF036CFF),
    primaryContainer: Color(0XFF18191F),
    secondaryContainer: Color(0XFFEB4335),

    // Error colors
    errorContainer: Color(0XFFEB0A24),
    onError: Color(0XBF036CFF),
    onErrorContainer: Color(0XFFFFFFFF),

    // On colors(text colors)
    onPrimary: Color(0X7F030D13),
    onPrimaryContainer: Color(0XFF9E9E9E),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber500 => Color(0XFFFFBD08);
  Color get amberA200 => Color(0XFFF7CA45);
  Color get amberA400 => Color(0XFFFFC000);
  Color get amberA700 => Color(0XFFFFA904);

  // Black
  Color get black900 => Color(0XFF000000);

  // Blue
  Color get blue100 => Color(0XFFB0D1FF);
  Color get blue200 => Color(0XFF9CC0F3);
  Color get blue300 => Color(0XFF68A7FF);
  Color get blue400 => Color(0XFF53ADF0);
  Color get blue50 => Color(0XFFE2F2FF);
  Color get blueA100 => Color(0XFF89B2EB);
  Color get blueA200 => Color(0XFF458EFF);
  Color get blueA20001 => Color(0XFF408FFD);
  Color get blueA20002 => Color(0XFF398BF3);
  Color get blueA400 => Color(0XFF1977F3);
  Color get blueA700 => Color(0XFF0066FF);

  // BlueGray
  Color get blueGray100 => Color(0XFFD6D6D6);
  Color get blueGray10001 => Color(0XFFC6D8E5);
  Color get blueGray10002 => Color(0XFFD0DDE8);
  Color get blueGray10003 => Color(0XFFD9D9D9);
  Color get blueGray300 => Color(0XFF9FA2AE);
  Color get blueGray30001 => Color(0XFF9390BB);
  Color get blueGray400 => Color(0XFF878787);
  Color get blueGray40001 => Color(0XFF8D8888);
  Color get blueGray40002 => Color(0XFF7E848D);
  Color get blueGray40003 => Color(0XFF8D8989);
  Color get blueGray500 => Color(0XFF6B688D);
  Color get blueGray600 => Color(0XFF5C717B);
  Color get blueGray700 => Color(0XFF52575C);
  Color get blueGray900 => Color(0XFF232533);
  Color get blueGray90001 => Color(0XFF333333);

  // Cyan
  Color get cyan400 => Color(0XFF26BDD0);
  Color get cyan600 => Color(0XFF1FB0C2);

  // DeepOrange
  Color get deepOrange200 => Color(0XFFF6C199);
  Color get deepOrangeA200 => Color(0XFFF56C2A);
  Color get deepOrangeA20001 => Color(0XFFFA7B34);

  // DeepOrangeAB
  Color get deepOrangeA700B2 => Color(0XB2E61515);

  // DeepPurple
  Color get deepPurpleA100 => Color(0XFFC285F5);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF1F3FA);
  Color get gray10002 => Color(0XFFF0F4F7);
  Color get gray10003 => Color(0XFFF5F7F9);
  Color get gray200 => Color(0XFFEEEEEE);
  Color get gray20001 => Color(0XFFE8E8E8);
  Color get gray300 => Color(0XFFE1E1E1);
  Color get gray30001 => Color(0XFFE3DBDB);
  Color get gray30002 => Color(0XFFDDDDDD);
  Color get gray30003 => Color(0XFFE5E1E1);
  Color get gray30004 => Color(0XFFE3DCDC);
  Color get gray30005 => Color(0XFFE5E5E5);
  Color get gray400 => Color(0XFFB4B4B4);
  Color get gray40001 => Color(0XFFC4C4C4);
  Color get gray40002 => Color(0XFFBBBBBB);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFFA2A2A7);
  Color get gray50001 => Color(0XFFADADAD);
  Color get gray50002 => Color(0XFF979797);
  Color get gray50024 => Color(0X249A8387);
  Color get gray600 => Color(0XFF808084);
  Color get gray60001 => Color(0XFF707070);
  Color get gray800 => Color(0XFF4B4B4B);
  Color get gray80001 => Color(0XFF4C4C4C);
  Color get gray900 => Color(0XFF2F2607);
  Color get gray90000 => Color(0X002E2506);
  Color get gray90001 => Color(0XFF1E1E2D);
  Color get gray90002 => Color(0XFF2A2A2A);
  Color get gray90003 => Color(0XFF1A1A1A);
  Color get gray90004 => Color(0XFF1E1E1E);

  // GreenAB
  Color get greenA400B2 => Color(0XB215E682);

  // LightBlue
  Color get lightBlue400 => Color(0XFF24C8FE);

  // LightGreen
  Color get lightGreen700 => Color(0XFF6BA52F);

  // Lime
  Color get lime700 => Color(0XFFC6A034);
  Color get lime800 => Color(0XFFC18041);
  Color get lime80001 => Color(0XFFC27D29);

  // Orange
  Color get orange400 => Color(0XFFFD9B2F);
  Color get orange600 => Color(0XFFFF8600);
  Color get orangeA200 => Color(0XFFF1B442);
  Color get orangeA20001 => Color(0XFFFCA748);
  Color get orangeA20002 => Color(0XFFFFA542);
  Color get orangeA700 => Color(0XFFFF6D04);

  // Purple
  Color get purple200 => Color(0XFFCBA6DC);

  // Red
  Color get red100 => Color(0XFFFEE2CF);
  Color get red300 => Color(0XFFEC7B88);
  Color get red400 => Color(0XFFEA5850);
  Color get red40001 => Color(0XFFEE5C5C);
  Color get red40002 => Color(0XFFEA5750);
  Color get red800 => Color(0XFFCD2B23);

  // Teal
  Color get teal50 => Color(0XFFDEE9F1);

  // White
  Color get whiteA700 => Color(0XFFFFFDFD);

  // Yellow
  Color get yellow50 => Color(0XFFFFFBED);
  Color get yellowA700 => Color(0XFFEED70B);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
